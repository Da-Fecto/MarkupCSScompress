<?php

/**
 * MarkupCSScompress
 *
 * Minimize and cache all styles from $config->styles and serve 1 one CSS Page back to
 * the browser
 *
 * usage:
 *
 * [1] Put the MarkupCSScompress.php into the template folder.
 * [2] Install this module.
 * [3] place <?php echo $modules->get('MarkupCSScompress')->render(); ?> in the head
 *     where the CSS link would be.
 *
 * note: Be shure you populated the $config->styles array.
 *
 * @copyright Copyright (c) 2013, Martijn Geerts
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class MarkupCSScompress extends WireData implements Module, ConfigurableModule {
	
	/**
	 * Module pre defined settings
	 *
	 */
	protected static $defaultConfigData = array(
		'cache_time' => 3600,
		'disabled_for_superuser' => 1,
		'clean_href' => 1
		);
	
	/**
	 * Provide some info
	 *
	 */
	public static function getModuleInfo() {
	
		return array(
			'title' => 'MarkupCSScompress',
			'version' => '050',
			'summary' => 'Combines all styles from $config->styles, compress the output and serve one link back to the browser.',
			'author' => 'Martijn Geerts',
			'href' => 'http://processwire.com/talk/topic/3964-markupcsscompress/',
			'singular' => true,
			'autoload' => false,
			'installs' => 'MarkupCache'
			);
	}
	
	/**
	 * Internal storage
	 *
	 */
	protected $data = array();
	protected $url; // (string) set in init
	protected $cssPage; // (Page object) set in init
	
	/**
	 * Set the default config data to this class
	 *
	 */
	public function __construct() {
	
		foreach (self::$defaultConfigData as $key => $value)
			$this->set($key, $value);
	}
	
	/**
	 * Set the default config data
	 *
	 */
	public function init() {
	
		// page used for CSS output 
		$this->cssPage = $this->pages->get('template=MarkupCSScompress');
		// loop through all $config->styles
		$urls = "";
		foreach ($this->config->styles as $style)
			$urls .= $style . "|";
		// append all css urls on the end of the dynamic css file
		$this->url = $this->cssPage->url . "?f=" . rtrim($urls, "|") . "&t=" . $this->cache_time;
	}
	
	/**
	 * Returns the link tag
	 *
	 */
	public function render() {
		
		$out = "";
		// (string) path where the template should be
		$path = wire('config')->paths->templates . get_class($this) . ".php";
		// (mixed) null or path, depending on existence or the template
		$path = is_file($path) ? $path : null;
		// (bool) module setting, serve a clean or a get variable populated url
		$clean_href = $this->clean_href;
		// (array) array with prepopulated styles
		$files = $this->config->styles;
		// (int) time to live
		$time = $this->cache_time;
		// (bool) true if conditions met else false
		$superuser = ($this->disabled_for_superuser == 1 && $this->user->isSuperuser()) ? true : false;
		
		/**
		 * (CSScompress disabled) all styles their own link.
		 *
		 */ 
		if ($superuser || $path == null) {
		
			$out .= $path == null ? "<!-- MarkupCSScompress.php doesn't exist in ./site/templates/, did you moved/copied it out of the MarkupCSScompress module folder?  -->\n\n\t" : '';
			$out .= $superuser && $path ? "<!--  Module MarkupCSScompress: CSS compress disabled for superusers -->\n\n\t" : "";
			
			foreach ($files as $file)
				$out .= "<link rel='stylesheet' href='{$file}'>\n\t";
			
			return $out;

		/**
		 * Pretty href in the link.
		 *
		 */ 
		} else if ($this->clean_href == 1) {
		
			// set $session with files & time data
			$this->session->set(get_class($this), array(
				"files" => $files,
				"time" => $time
			));
			
			return "<link rel='stylesheet' href='{$this->cssPage->url}'>\n";
			
		} else {
			// ugly link
			return "<link rel='stylesheet' href='{$this->url}'>\n";
		}
	}
	
	/**
	 * Module configuration screen
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {
		
		$inputfields = new InputfieldWrapper();
		
		foreach (self::$defaultConfigData as $key => $value) {
			if (!isset($data[$key]))
				$data[$key] = $value;
		}
		
		if (!is_file(wire('config')->paths->templates . "MarkupCSScompress.php")) {
			$f = wire('modules')->get('InputfieldMarkup');
			$f->set('label', sprintf(__('%s template file'), get_class($this) . ".php"));
			$f->set('description', sprintf(__('There is no %1$s template in %2$s.'), get_class($this) . ".php", "." . wire('config')->urls->templates));
			$f->set('value', "<span class='ui-icon ui-icon-alert' style='float: left; opacity: 0.5;'></span>");
			$f->set('notes', "Please move the template to the templates folder");
			$inputfields->add($f);
		}
		
		$f = wire('modules')->get('InputfieldInteger');
		$f->attr('id+name', 'cache_time');
		$f->set('label', __('CSS cache expiration'));
		$f->set('description', __('To cache the output of the CSS page, enter the time (in seconds) that the output should be cached.'));
		$f->set('notes', __('For example: 60 = 1 minute, 600 = 10 minutes, 3600 = 1 hour, 86400 = 1 day, 604800 = 1 week, 2419200 = 1 month.'));
		$f->attr('value', $data['cache_time']);
		$inputfields->add($f);
		
		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('id+name', 'disabled_for_superuser');
		$f->set('label', __('Caching & concatenating disabled for superusers'));
		$f->set('description', __('If checked, CSS files will not be combined & cached for superusers.'));
		$f->set('notes', __('Each CSS file will have his own <link> tag.'));
		$data['disabled_for_superuser'] ? $f->set('checked', 'checked') : false;
		$f->attr('value', $data['disabled_for_superuser']);
		$inputfields->add($f);
		
		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('id+name', 'clean_href');
		$f->set('label', __('Clean href'));
		$f->set('description', __('If checked, the href of the <link> tag will not contain $_GET variables.'));
		$f->set('notes', sprintf(__('$session->%s will be used to store the $config->styles.'), get_class($this)));
		$data['clean_href'] ? $f->set('checked', 'checked') : false;
		$f->attr('value', $data['clean_href']);
		$inputfields->add($f);
		
		return $inputfields;
	}
	
	
	public function ___install() {
		
		$roles = wire("roles");
		$pages = wire("pages");
		$config = wire("config");
		$templates = wire("templates");
					
		$role = array();
		$roles = $pages->get($config->rolesPageID)->children();
		$role[] = (int) $roles->get("name=guest")->id;
		
		$fg = new fieldgroup();
		$fg->name = "MarkupCSScompress";
		$fg->add("title");
		$fg->save();
		
		$tpl = new Template();
		$tpl->name = "MarkupCSScompress";
		$tpl->label = "Template for the MarkupCSScompress module.";
		// not (yet) compatible with Languages Support Pages Names
		// $tpl->slashUrls = 0;
		$tpl->fieldgroup = $fg;
		$tpl->useRoles = 1;
		$tpl->set("roles", $role);
		$tpl->save();
		
		$linkPage = new Page();
		$linkPage->template = $tpl;
		$linkPage->parent = $pages->get($config->adminRootPageID);
		$linkPage->name = 'styles.min.css';
		$linkPage->title = 'MarkupCSScompress';
		$linkPage->addStatus(Page::statusHidden);
		$linkPage->save();
	}
	
	public function ___uninstall() {
		
		$pages = wire("pages");
		$templates = wire("templates");
		$fieldgroups = wire("fieldgroups");

		$linkPage = $pages->get('parent=/processwire/, template=MarkupCSScompress, include=hidden');
		if ($linkPage->id != null) $linkPage->delete();
			
		$template = $templates->get("MarkupCSScompress");
		$fieldgroupId = (int) $template->fields->id;
		$fieldgroup = $fieldgroups->get($fieldgroupId); 
				
		if ($template->id != null) $templates->delete($template);		
		if ($fieldgroup->id != null) $fieldgroups->delete($fieldgroup);
					
	}
}