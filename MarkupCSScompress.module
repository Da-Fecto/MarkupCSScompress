<?php

/**
 * MarkupCSScompress
 *
 * Minimize and cache all styles from $config->styles and serve 1 one CSS Page back to
 * the browser
 *
 * usage:
 *
 * [1] Put the MarkupCSScompress.php into the template folder.
 * [2] place <?php echo $modules->get('MarkupCSScompress')->render(); ?> in the head
 *     where the CSS link would be.
 * [3] Install this module.
 *
 * note: Be shure you populated the $config->styles array.
 *
 * @copyright Copyright (c) 2013, Martijn Geerts
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class MarkupCSScompress extends WireData implements Module, ConfigurableModule {
	
	/**
	 * Module pre defined settings
	 *
	 */
	protected static $defaultConfigData = array(
		'cache_time' => 86400,
		'disabled_for_superuser' => 1,
		);
	
	/**
	 * Provide some info
	 *
	 */
	public static function getModuleInfo() {
	
		return array(
			'title' => 'MarkupCSScompress',
			'version' => '085',
			'summary' => 'Combines all styles from $config->styles, compress the output and serve one link back to the browser.',
			'author' => 'Martijn Geerts',
			'href' => 'http://processwire.com/talk/topic/3964-markupcsscompress/',
			'singular' => true,
			'autoload' => false,
			'installs' => 'MarkupCache'
			);
	}
	
	/**
	 * Internal storage
	 *
	 */
	protected $data = array();
	protected $cssPage; // (Page object) set in init
	
	/**
	 * Set the default config data to this class
	 *
	 */
	public function __construct() {
		foreach (self::$defaultConfigData as $key => $value)
			$this->set($key, $value);
	}
	
	/**
	 * Set the default config data
	 *
	 */
	public function init() {
		// page used for CSS output 
		$this->cssPage = $this->pages->get('template=MarkupCSScompress');
	}
	
	/**
	 * Returns (string) Markup
	 *
	 */
	public function render() {
		
		$config = wire('config');
		// (string) $templatePath where the template should be
		$templatePath = $config->paths->templates . get_class() . ".php";
		// (mixed) null or path, depending on existence or the template
		$templatePath = is_file($templatePath) ? $templatePath : null;
		// (bool) true if conditions met else false
		$superuser = ($this->disabled_for_superuser == 1 && $this->user->isSuperuser()) ? true : false;

		$out = "";

		// (CSScompress disabled) all styles their own link.
		if ($superuser || !$templatePath ) {
		
			$out .= !$templatePath ? "<!-- MarkupCSScompress.php doesn't exist in ./site/templates/, did you moved/copied it out of the MarkupCSScompress module folder? -->\n\n\t" : '';
			$out .= $superuser && $path ? "<!--  Module MarkupCSScompress: CSS compress disabled for superusers -->\n\n\t" : "";
			
			foreach ($config->styles as $file) $out .= "<link rel='stylesheet' href='{$file}'>\n\t";

		// set the session, styles are found
		} else if (count($config->styles)) {
		
			$this->session->set(get_class(), array(
				"files" => $config->styles,
				"time" => $this->cache_time
			));
			
			$out .= "<link rel='stylesheet' href='{$this->cssPage->url}'>\n";
			
		} else {
		
			$out .= "<!-- MarkupCSScompress: \$config->styles array is not populated -->\n";
			
		}
		
		return $out;
	}
	
	/**
	 * Module configuration screen
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$config = wire("config");
		$modules = wire("modules");
		
		$inputfields = new InputfieldWrapper();
		
		foreach (self::$defaultConfigData as $key => $value) {
			if (!isset($data[$key]))
				$data[$key] = $value;
		}
		
		
		$f = $modules->get('InputfieldMarkup');

		$f->set('label', "Module call & template file" );
		
		$txt = "<h3>Short install instructions</h3>";
		$txt .= "<ol>";
		$txt .="<li style='list-style-position: inside;'>";
		$txt .= "<strong>";
		$txt .= sprintf(__('Please put the %1$s template in %2$s.'), 
			get_class() . ".php", "." . $config->urls->templates);
		$txt .= "</strong>";
		$txt .= "</li>";
		$txt .="<li style='list-style-position: inside;'>";
		$txt .= "Place the code in the &lt;head&gt; where your &lt;link rel=\"stylesheet\" src=\"styles.css\" /&gt; would be.";
		$txt .= "</li>";
		$txt .= "</ol>";
		$txt .= "<code style='padding: .5em; background: rgba(0,0,0,.05); border-radius: 3px; display: block'>";
		$txt .= "&lt;?php echo \$modules->get(\"MarkupCSScompress\")->render(); ?&gt;";
		$txt .= "</code>" ;
		
		$f->set('value', $txt );
		$inputfields->add($f);
		
		$f = $modules->get('InputfieldInteger');
		$f->attr('id+name', 'cache_time');
		$f->set('label', __('CSS cache expiration'));
		$f->set('description', __('To cache the output of the CSS page, enter the time (in seconds) that the output should be cached.'));
		$f->set('notes', __('For example: 60 = 1 minute, 600 = 10 minutes, 3600 = 1 hour, 86400 = 1 day, 604800 = 1 week, 2419200 = 1 month.'));
		$f->attr('value', $data['cache_time']);
		$inputfields->add($f);
		
		$f = $modules->get('InputfieldCheckbox');
		$f->attr('id+name', 'disabled_for_superuser');
		$f->set('label', __('Caching & concatenating disabled for superusers'));
		$f->set('description', __('If checked, CSS files will not be combined & cached for superusers.'));
		$f->set('notes', __('Each CSS file will have his own <link> tag.'));
		$data['disabled_for_superuser'] ? $f->set('checked', 'checked') : false;
		$f->attr('value', $data['disabled_for_superuser']);
		$inputfields->add($f);
		
		return $inputfields;
	}
	
	/**
	 * Install the module, create template & page
	 *
	 */
	public function ___install() {
		
		$roles = wire("roles");
		$pages = wire("pages");
		$config = wire("config");
		$templates = wire("templates");
		
		$fg = new fieldgroup();
		$fg->name = "MarkupCSScompress";
		$fg->add("title");
		$fg->save();
		
		$tpl = new Template();
		$tpl->name = "MarkupCSScompress";
		// not (yet) compatible with Languages Support Pages Names
		// $tpl->slashUrls = 0;
		$tpl->fieldgroup = $fg;
		$tpl->noUnpublish = 1;
		$tpl->noGlobal = 1;
		$tpl->useRoles = 1;
		// needs array of role id's
		$tpl->roles = array($config->guestUserPageID);
		// needs array of template id's
		$tpl->parentTemplates = array($config->adminRootPageID);
		$tpl->flags = Template::flagSystem; // needs Template::flagSystemOverride to disable
		$tpl->save();
		
		$linkPage = new Page();
		$linkPage->template = $tpl;
		$linkPage->parent = $pages->get($config->adminRootPageID);
		$linkPage->name = 'styles.min.css';
		$linkPage->title = 'MarkupCSScompress';
		$linkPage->addStatus(Page::statusHidden);
		$linkPage->save();
	}
	
	
	/**
	 * Uninstall the module, clean up
	 *
	 */	
	public function ___uninstall() {
		
		$pages = wire("pages");
		$config = wire("config");
		$templates = wire("templates");
		$fieldgroups = wire("fieldgroups");

		$linkPage = $pages->get("parent={$config->adminRootPageID}, template=MarkupCSScompress, include=hidden");
		if ($linkPage->id != null) $linkPage->delete();
			
		$template = $templates->get("MarkupCSScompress");
		$fieldgroupId = (int) $template->fields->id;
		$fieldgroup = $fieldgroups->get($fieldgroupId); 
				
		if ($template->id != null) {
			$template->flags = Template::flagSystemOverride; 
			$template->flags = 0;
			$templates->delete($template);
		}	
		if ($fieldgroup->id != null) $fieldgroups->delete($fieldgroup);
					
	}
}